%%Group Project Runge-Kutta
clear,clc
% Initial conditions
N = 1000; %Population
b = 0.1; %Rate of infection
g = 0.005; %Recovery rate
final = 1500; %End time
%Step size
h = 1;

I(1) = 20; %infected population
S(1) = N-I(1); %susceptable population
R(1) = 0; %Recovered Population
n=1;
for t = 0:h:final %Time Duration

%Susceptable population
k1 = -(b/N)*S(n)*I(n);
k2 = -(b/N)*(S(n)+((k1*h)/2))*(I(n)+((k1*h)/2));
k3 = -(b/N)*(S(n)+((k2*h)/2))*(I(n)+((k2*h)/2));
k4 = -(b/N)*(S(n)+((k3*h)))*(I(n)+((k3*h)));
S(n+1) = S(n) + (h/6)*(k1 + 2*k2 + 2*k3 + k4);

%Infected population
k1 = (b/N)*S(n)*I(n) - g*I(n);
k2 = (b/N)*(S(n)+((k1*h)/2))*(I(n)+((k1*h)/2))- g*(I(n)+((k1*h)/2));
k3 = (b/N)*(S(n)+((k2*h)/2))*(I(n)+((k2*h)/2)) - g*(I(n)+((k2*h)/2));
k4 = (b/N)*(S(n)+((k3*h)))*(I(n)+((k3*h))) - g*(I(n)+k3*h);
I(n+1) = I(n) + (h/6)*(k1 + 2*k2 + 2*k3 + k4);

%Recovered Population
k1 = g*I(n);
k2 = g*(I(n)+((k1*h)/2));
k3 = g*(I(n)+((k2*h)/2));
k4 = g*(I(n)+k3*h);
R(n+1) = R(n) + (h/6)*(k1 + 2*k2 + 2*k3 + k4);
n=n+1;
end

t=0:h:final+h;
figure(1);
plot(t,S,t,I,t,R)
title('Runge-Kutta',h)
xlabel('Time')
ylabel('Population')
legend({'S(t)','I(t)','R(t)'},'Location','northeast')

%%
%Interploation
%initial conditions
N = 1000; %Population
b = 0.3; %Rate of infection
g = 0.1; %Recovery rate
final = 100; %End time
%Step size
h = 2;
Ni=50; %Interpolated points
%Error Summation
TotS=0;
TotI=0;
TotR=0;

Ii(1) = 20; %infected population
Si(1) = N-Ii(1); %susceptable population
Ri(1) = 0; %Recovered Population
t=0:h:final;

for n = 1:length(t)-2 %Time Duration
%Susceptable population
k1 = -(b/N)*Si(n)*Ii(n);
k2 = -(b/N)*(Si(n)+((k1*h)/2))*(Ii(n)+((k1*h)/2));
k3 = -(b/N)*(Si(n)+((k2*h)/2))*(Ii(n)+((k2*h)/2));
k4 = -(b/N)*(Si(n)+((k3*h)))*(Ii(n)+((k3*h)));
Si(n+2) = Si(n) + (h/6)*(k1 + 2*k2 + 2*k3 + k4);

%Infected population
k1 = (b/N)*Si(n)*Ii(n) - g*Ii(n);
k2 = (b/N)*(Si(n)+((k1*h)/2))*(Ii(n)+((k1*h)/2))- g*(Ii(n)+((k1*h)/2));
k3 = (b/N)*(Si(n)+((k2*h)/2))*(Ii(n)+((k2*h)/2)) - g*(Ii(n)+((k2*h)/2));
k4 = (b/N)*(Si(n)+((k3*h)))*(Ii(n)+((k3*h))) - g*(Ii(n)+k3*h);
Ii(n+2) = Ii(n) + (h/6)*(k1 + 2*k2 + 2*k3 + k4);

%Recovered Population
k1 = g*Ii(n);
k2 = g*(Ii(n)+((k1*h)/2));
k3 = g*(Ii(n)+((k2*h)/2));
k4 = g*(Ii(n)+k3*h);
Ri(n+2) = Ri(n) + (h/6)*(k1 + 2*k2 + 2*k3 + k4);
end

%Interpolation starting at second data point 
for n = 2:length(t)-2 
if (-1)^n >0    %if even stay the same
Si(n+2)=Si(n+2);
Ii(n+2)=Ii(n+2);
Ri(n+2)=Ri(n+2);
else            %else odd interpolate
    Si(n+1)=Si(n-1)+((Si(n+2)-Si(n-1))/((n+2)-(n-1)))*((n+1)-(n-1));
    Ii(n+1)=Ii(n-1)+((Ii(n+2)-Ii(n-1))/((n+2)-(n-1)))*((n+1)-(n-1));
    Ri(n+1)=Ri(n-1)+((Ri(n+2)-Ri(n-1))/((n+2)-(n-1)))*((n+1)-(n-1));
    TotS=(Si(n+1)-S(n+1));
    TotI=(Ii(n+1)-I(n+1));
    TotR=(Ri(n+1)-R(n+1));
end
end
%Errors
ES=sqrt(TotS^2/Ni);
EI=sqrt(TotI^2/Ni);
ER=sqrt(TotR^2/Ni);

figure(2);
plot(t,Si,t,Ii,t,Ri)
title('Interpolation',h)
xlabel('Time')
ylabel('Population')
legend({'S(t)','I(t)','R(t)'},'Location','northeast')
